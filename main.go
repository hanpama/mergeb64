package main

import (
	"encoding/base64"
	"flag"
	"fmt"
	"io"
	"os"
	"path/filepath"

	"github.com/knq/snaker"
)

const help = `usage: mergeb64 -in <glob> -out <path>`

const header = `// Code generated by mergeb64. DO NOT EDIT.
package %s

import "encoding/base64"

`

func main() {

	globPtr := flag.String("in", "", "File glob to merge")
	outPtr := flag.String("out", "", "Output file path")
	flag.Parse()

	if *globPtr == "" || *outPtr == "" {
		println("Required flag missing")
		println(help)
		return
	}

	absdir, err := filepath.Abs(*outPtr)
	must(err)

	packageName := filepath.Base(filepath.Dir(absdir))

	outf, err := os.OpenFile(*outPtr, os.O_TRUNC|os.O_WRONLY|os.O_CREATE, os.ModePerm)
	must(err)
	err = outf.Truncate(0)
	must(err)

	files, err := filepath.Glob(*globPtr)
	must(err)

	_, err = outf.WriteString(fmt.Sprintf(header, packageName))
	must(err)

	for _, filename := range files {
		err = writeFile(filename, outf)
		must(err)
	}
}

func writeFile(filename string, outf *os.File) (err error) {
	var b []byte
	varName := snaker.ForceCamelIdentifier(filepath.Base(filename))
	_, err = outf.WriteString("var " + varName + ", _ = base64.StdEncoding.DecodeString(``")
	if err != nil {
		return err
	}

	inf, err := os.OpenFile(filename, os.O_RDONLY, os.ModePerm)
	if err != nil {
		return err
	}
	enc := base64.NewEncoder(base64.StdEncoding, outf)

	for {
		b = make([]byte, 72)

		_, err := inf.Read(b)
		if err == io.EOF {
			break
		}
		_, err = outf.WriteString(" +\n  `")
		if err != nil {
			return err
		}
		_, err = enc.Write(b)
		if err != nil {
			return err
		}
		_, err = outf.WriteString("`")
		if err != nil {
			return err
		}
	}
	_, err = outf.WriteString(",\n)\n")
	return err
}

func must(err error) {
	if err != nil {
		panic(err)
	}
}
